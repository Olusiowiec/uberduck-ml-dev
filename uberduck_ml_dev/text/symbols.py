# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/text.symbols.ipynb (unless otherwise specified).

__all__ = ['symbols', 'symbols_to_sequence', 'arpabet_to_sequence', 'should_keep_symbol', 'symbol_to_id',
           'id_to_symbol', 'curly_re', 'words_re', 'say_hello2']

# Cell

""" from https://github.com/keithito/tacotron """

"""
Defines the set of symbols used in text input to the model.
The default is a set of ASCII characters that works well for English or text that has been run through Unidecode. For other data, you can modify _characters. See TRAINING_DATA.md for details. """

from . import cmudict

_punctuation = "!'\",.:;? "
_math = "#%&*+-/[]()"
_special = "_@©°½—₩€$"
_accented = "áçéêëñöøćž"
_numbers = "0123456789"
_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

# Prepend "@" to ARPAbet symbols to ensure uniqueness (some are the same as
# uppercase letters):
_arpabet = ["@" + s for s in cmudict.valid_symbols]

# Export all symbols:
symbols = (
    list(_punctuation + _math + _special + _accented + _numbers + _letters) + _arpabet
)

# Cell
import re

symbol_to_id = {s: i for i, s in enumerate(symbols)}
id_to_symbol = {i: s for i, s in enumerate(symbols)}
curly_re = re.compile(r"(.*?)\{(.+?)\}(.*)")
words_re = re.compile(
    r"([a-zA-ZÀ-ž]+['][a-zA-ZÀ-ž]{1,2}|[a-zA-ZÀ-ž]+)|([{][^}]+[}]|[^a-zA-ZÀ-ž{}]+)"
)


def symbols_to_sequence(symbols):
    return [symbol_to_id[s] for s in symbols if should_keep_symbol(s)]


def arpabet_to_sequence(text):
    return symbols_to_sequence(["@" + s for s in text.split()])


def should_keep_symbol(s):
    return s in symbol_to_id and s != "_" and s != "~"

# Cell
def say_hello2():
    print("hello, world")