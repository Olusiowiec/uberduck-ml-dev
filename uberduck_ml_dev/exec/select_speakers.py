# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/exec.select_speakers.ipynb (unless otherwise specified).

__all__ = ['Filelist', 'select_speakers', 'parse_args', 'CACHE_LOCATION']

# Cell
import argparse
from collections import namedtuple
from dataclasses import dataclass
import json
import os
from pathlib import Path
from shutil import copyfile, copytree
import sys
from typing import List, Optional, Set

from tqdm import tqdm

from ..utils.audio import convert_to_wav
from ..utils.utils import parse_vctk

CACHE_LOCATION = Path.home() / Path(".cache/uberduck/uberduck-ml-dev.db")


@dataclass
class Filelist:
    path: str
    speakers: Optional[List[int]] = None


def _get_speaker_ids(filelist: Filelist) -> Set[int]:
    if filelist.speakers:
        return set(filelist.speakers)
    else:
        raise Exception("pass a list of speakerss")


def select_speakers(filelists: List[Filelist], output_filelist: str):
    speaker_id = 0
    with open(output_filelist, "w") as f_out:
        for filelist in tqdm(filelists):
            speaker_ids = _get_speaker_ids(filelist)
            with open(filelist.path, "r") as f_in:
                for line in f_in.readlines():
                    _, _, speaker_id = line.strip().split("|")
                    if int(speaker_id) in speaker_ids:
                        f_out.write(line)


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("--config", help="path to JSON config")
    return parser.parse_args(args)


try:
    from nbdev.imports import IN_NOTEBOOK
except:
    IN_NOTEBOOK = False

if __name__ == "__main__" and not IN_NOTEBOOK:
    args = parse_args(sys.argv[1:])
    if args.config:
        config = json.load(args.config)
        filelists = config["filelists"]
        output_filelist = config["output"]
    else:
        raise Exception("You must pass a config file!")
    select_speakers(filelists, output_filelist)