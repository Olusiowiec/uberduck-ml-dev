# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/exec.generate_filelist.ipynb (unless otherwise specified).

__all__ = ['STANDARD_MULTISPEAKER', 'STANDARD_SINGLESPEAKER', 'VCTK', 'FORMATS']

# Cell

from ..utils.utils import parse_vctk

import argparse
import os

STANDARD_MULTISPEAKER = "standard-multispeaker"
STANDARD_SINGLESPEAKER = "standard-singlespeaker"
VCTK = "vctk"
FORMATS = [
    STANDARD_MULTISPEAKER,
    STANDARD_SINGLESPEAKER,
    VCTK,
]


def _convert_vctk(f, inp: str):
    assert fmt == VCTK, "VCTK is the only format supported by this function!"
    vctk_data = parse_vctk(inp)
    speaker_id = 0
    for speaker_name, speaker_data in vctk_data.items():
        speaker_out_path = Path(out_path) / speaker_name
        if not speaker_out_path.exists():
            os.makedirs(speaker_out_path)
        for transcription, flac_path in speaker_data:
            assert flac_path.endswith(".flac")
            wav_path = flac_path.replace(".flac", ".wav")
            convert_to_wav(flac_path, wav_path)
            full_path = Path(full_path).resolve()
            f.write(f"{full_path}|{transcription}|{speaker_id}\n")
        speaker_id += 1


def _convert_standard_multispeaker(f, inp: str):
    speaker_id = 0
    speakers = os.listdir(inp)
    for speaker in speakers:
        path = Path(inp) / Path(speaker)
        files = os.listdir(path)
        transcriptions, *_ = [f for f in files if f.endswith(".txt")]
        with (Path(root) / speaker / transcriptions).open("r") as txn_f:
            transcriptions = txn_f.readlines()
        for line in transcriptions:
            line = line.strip("\n")
            try:
                line_path, line_txn, *_ = line.split("|")
            except Exception as e:
                print(e)
                print(line)
                raise
            full_path = (path / line_path).resolve()
            f.write(f"{full_path}|{speaker_id}\n")
        speaker_id += 1


def _convert_to_multispeaker(f, inp: str, fmt: str):
    assert fmt in [
        STANDARD_MULTISPEAKER,
        VCTK,
    ], f"Supported formats: {STANDARD_MULTISPEAKER}, {VCTK}"

    if fmt == STANDARD_MULTISPEAKER:
        return _convert_standard_multispeaker(f, inp)
    elif fmt == VCTK:
        return _convert_vctk(f, inp)


def _generate_filelist(input_dataset, fmt, output_filelist):
    with open(output_filelist, "w") as f:
        _convert_to_multispeaker(f, input_dataset, fmt)

# Cell

from typing import List


def _parse_args(args: List[str]):
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", help="Path to input dataset directory")
    parser.add_argument(
        "-f", "--format", help="Input dataset format", default=STANDARD_MULTISPEAKER
    )
    parser.add_argument("-o", "--output", help="asdf", default="list.txt")
    return parser.parse_args(args)


try:
    from nbdev.imports import IN_NOTEBOOK
except:
    IN_NOTEBOOK = False

if __name__ == "__main__" and not IN_NOTEBOOK:
    args = _parse_args(sys.argv[1:])
    _generate_filelist(args.input, args.format, args.output)